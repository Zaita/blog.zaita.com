<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="blog.zaita.com/feed.xml" rel="self" type="application/atom+xml" /><link href="blog.zaita.com/" rel="alternate" type="text/html" /><updated>2023-03-29T13:58:38+13:00</updated><id>blog.zaita.com/feed.xml</id><title type="html">Scott Rasmussen (Zaita) Blog</title><subtitle>This blog covers my personal views, opinions and experiences. It does not represent my employer or clients in any way. For professional contact, please use my linkedin profile.</subtitle><entry><title type="html">Digital automation of security assurance work-flows</title><link href="blog.zaita.com/certification/accreditation/risk/security%20assurance/automation/work-flow/2021/02/22/Digital-automation-of-security-assurance-work-flows.html" rel="alternate" type="text/html" title="Digital automation of security assurance work-flows" /><published>2021-02-22T13:00:00+13:00</published><updated>2021-02-22T13:00:00+13:00</updated><id>blog.zaita.com/certification/accreditation/risk/security%20assurance/automation/work-flow/2021/02/22/Digital-automation-of-security-assurance-work-flows</id><content type="html" xml:base="blog.zaita.com/certification/accreditation/risk/security%20assurance/automation/work-flow/2021/02/22/Digital-automation-of-security-assurance-work-flows.html"><![CDATA[<p>Note: This post is not about selling a product. The security assurance work flow product I am describing is open source and free for everyone. We even provide a default configuration that is based on our own internal security assurance life-cycle for free. This is not a sales pitch. If you’d rather just jump straight to the <a href="https://github.com/NZTA/SDLT/wiki">SDLT Wiki</a>, please feel free.</p>

<h2 id="copying-and-evolving">Copying and evolving</h2>

<p>At the end of 2018 I attended <a href="https://2018.kiwicon.org">Kiwicon</a> and enjoyed a talk from Slack about their <a href="https://github.com/slackhq/goSDL">Security Development Tool</a>. This was an interesting talk as I am incredibly lazy… and enjoy automating tasks that do not provide any value add from my time. Coincidentally, the following Monday I was approached by one of our engineering managers to automate security assurance practices into their devops processes better. They were doing their own thing as the organisation had failed to provide them an adequate security life-cycle. Aha! I thought, the Slack SDL fits this perfectly.</p>

<p>Fast forward 24 hours and we had a working copy of the goSDL running internally, and we were most disappointed. The goSDL provided us some check-lists, but they were really aimed at assessing a single product through a largely static process. We have &gt;1,600 systems. It was very rudimentary and required quite a lot of knowledge by the submitter to complete. While it did provide a risk rating, it didn’t provide any context or next steps. We determined that we’d struggle to gain value from it, but we really liked the concept.</p>

<p>I spoke to the Head of Security and asked for a few weeks to expand on the concept with my own proof of concept. Two weeks later I had a demo of what I had nicknamed the SDLT or Security Development Life-cycle Tool. The user could pick from different deliverable types and then get assigned tasks relevant to their delivery. Everything was handled in this simple web-app. The feedback was immediately positive and the organisation offered to fund a version 1.</p>

<p><em>Note: Funny enough, a member of the devops team thought the proof of concept was a real product and made an actual submission for a change he was working on, so that was definitely something that helped me get funding.</em></p>

<h2 id="building-and-selling-the-concept">Building and selling the concept</h2>

<p>In my mind, I wanted to have a customisable work-flow system for our security assurance life-cycle. I researched and reached out to some vendors to see what was in the market, but the same four problems always came up.</p>
<ol>
  <li>The licencing costs would be like $500k/pa</li>
  <li>The product didn’t come with any default work-flows, we’d have to customise our own</li>
  <li>They had broken risk assessment concepts</li>
  <li>They required programming or scripting</li>
</ol>

<p>This didn’t sit well with me. Why would I pay $500k/pa only to have to build all the logic I wanted. Why can’t I have something that is effectively drag-n-drop with simple customisations. I really wanted something that allowed me to build simple representations of flow-charts. Some of them talked about their alignment to the New Zealand Information Security Manual, but when we inquired more they were just dumb control lists that weren’t part of a wider process. Nobody provided an out of the box, easily customisable end-to-end assurance life-cycle.</p>

<p>I had some further discussions with the Head of Security and decided to bite the bullet and take the funding to build our own version 1. Surely if we built something useful for us, it’d be useful for other organisations? So why not open source it? We’re a public sector organisation, so there is no benefit in keeping it closed source. After some.. tough discussions with our procurement team, I was able to get a contract sorted that ensured the product would remain open source under the BSD licence. The organisation would pay a retainer to a local development company to manage the project for us… win win fucking win!</p>

<p>I reached out to contacts I had at Catalyst NZ Ltd who an open source development specialist organisation to see if they’d be interested in coming on board as our development partner; they jumped at the chance. We would be the first NZ Government Agency to fund an open source project. I wanted to take it a step forward and got approval to open source our own internal flows and configurations. This means that anyone who picked up the SDLT would be able to start with our working flows as a base and improve from there. A full security assurance tool out of the box for no cost.. fuck yes.</p>

<h2 id="what-the-hell-am-i-building">What the hell am I building?</h2>

<p>Well. I want something that is like a flow chart. The user would see a set of questions on the front end, and we’d have some basic logic on the back end to only do relevant things. Right, time for some key principles.</p>
<ol>
  <li>Shortest Path First - The user only sees or answers questions that are relevant.</li>
  <li>Only what is needed - Only give the user tasks that are necessary</li>
  <li>Reduce the noise - Try to do everything without a Security staff member as much as possible</li>
  <li>80% Hands off - 80% of all submissions shouldn’t require any special effort</li>
  <li>Conquer the world - Start with security, but rope in other teams and stakeholders with tasks</li>
</ol>

<p>These seem like a good place to start.  My concept was a security assurance work-flow tool that would handle &gt;80% of all deliveries we did without requiring a dedicated security resource. We’d handle our obligations under the Privacy Act, Public Records Act and Official Information Act through the tool. We’d support different deliverable types including proof of concept, software trial, software as a service adoption, project release, technical change and bug fixes. We’d deliver this as a Software as a Service web application.</p>

<p>The product would be open source, free for everyone and we’d provide our own internal configuration (flows/tasks etc) for nothing.</p>

<h2 id="what-is-the-security-development-life-cycle-tool">What is the Security Development Life-cycle Tool?</h2>

<p>The SDLT is a web application that walks a user through the security assurance life-cycle. They’re taken step-by-step through all of the tasks they need to complete and submit to key stakeholders through a single platform. Where their deliverable has Privacy concerns, they’ll be taken through a Privacy Threshold Assessment task that is automatically emailed to the Privacy Officers for approval. Approvals on all tasks and the submission are handled within the tool; no more printing/signing and scanning documents.</p>

<p>The SDLT provides a single front door to Security (and more… see below) for the organisation. The process is objective, repeatable, auditable and optimised.</p>

<p><em>Note: I say front door to security, but the reality is that we’ve also incorporated PCI-DSS, Privacy and Information Management as key stakeholders with their own tasks. There is work happening to also include procurement, legal and vendor services as well effectively making it a single front door for “go-live”</em></p>

<h2 id="the-high-level-user-flow">The high level user flow</h2>

<p>The user would land on the front page and select the type of deliverable that they had. We’d bunch them into 4 categories that we call pillars.</p>
<ol>
  <li>Proof of Concept or Software Trial</li>
  <li>Software as a Service</li>
  <li>Solution/Project Delivery or Initial Software Release</li>
  <li>Technical Change, Feature Release or Bug-Fix</li>
</ol>

<p>After selecting the deliverable type, they’d go into the parent questionnaire assigned to that pillar. The pillar questionnaire would ask key information about the deliverable. Who is the business owner? Will you deal with any personal information? Will you be exposing any new public services? When is your go live? 
Depending on how the user answers, the submission would have tasks assigned for the user to complete prior to being able to submit for approval. If the user answers yes to personal information, then they have to do a Privacy Threshold Assessment. If they answer yes to exposing new public services, then they have to do a penetration test. Out of the box, we have approximately 30 tasks.</p>

<p>Tasks are broken down into 2 major types.</p>
<ol>
  <li>Where the task is completed externally. We provide a link to the user from the SDLT task to the document they must complete. Then we ask for a link to where they have stored the completed document in our document management system.</li>
  <li>The task is completed entirely within the SDLT. We ask for information from the user and the tool determines the next steps.</li>
</ol>

<p>Once a user has completed all assigned tasks on their submission, they can send the entire submission through for approval. The submission would be sent to the Security Architect team to review and approve. After a Security Architect has approved, the submission will be sent to the Chief Information Security Officer for a recommendation approval and to the Business Owner to formally approve and accept the associated risks.</p>

<h2 id="doing-it-without-programming">Doing it without programming</h2>

<p>The SDLT is designed to be edited by people without a development background. We use SilverStripe as a CMS and everything is built on top of that. When adding a button to a question you can create an action to assign. The button can give the user a message, skip ahead to another question or allocate a task to be created on the submission.</p>

<p>For more information about the different types of tasks we provide out of the box please check out the <a href="https://github.com/NZTA/SDLT/wiki/Basic-Concepts:-Tasks">wiki</a></p>

<h2 id="success-or-failure">Success or failure?</h2>

<p>The SDLT was built on the crazy idea of building an open source work-flow tool for automating security assurance. Nothing in the market did what we wanted out of the box and those that provided frameworks wanted to be paid in kilograms of gold.</p>

<p>Two years on, we’ve had more than 400 submissions through the SDLT. Over 75% of those would never have come to security due to lack of resourcing and process. Our primary focus has been increasing adoption so that we can increase visibility of what is happening. We believe this has been incredible successful.</p>

<p>For those who noticed, above I noted that off the shelf products had terrible risk assessment concepts. We went on to build SDLT version 2 that includes a digital security risk assessment methodology. As this is a topic in it’s own right, I’ll write about this next. For those who are too keen to wait to hear more about this please check out the <a href="https://github.com/NZTA/SDLT/wiki/Basic-Concepts:-DSRA">GitHub Wiki</a>. The TLDR is that we can automate the risk assessment process from start to finish and have it meaningful and measurable over time.</p>

<h2 id="how-do-i-get-it">How do I get it?</h2>

<p>As mentioned, the SDLT is open source. You can grab a copy from the <a href="https://github.com/NZTA/SDLT">GitHub Repository</a> and follow the <a href="https://github.com/NZTA/SDLT/wiki">Wiki Instructions</a> to deploy it.</p>

<p>Alternatively, Catalyst have stood up a <a href="https://www.catalyst.net.nz/products/security-development-lifecycle-tool">SDLT SaaS product</a> that can be subscribed too. This is ideal for larger organisations who want to ensure they get updates and bug-fixes as we develop them.</p>

<h2 id="free-screenshots">Free screenshots</h2>
<p>If you just want to see what it looks like, here are some handy screenshots.</p>

<p>The SDLT Landing Page:
<img src="/images/sdlt_landing_page.png" alt="The landing page" />
Answering questions within a pillar:
<img src="/images/sdlt_pillar.png" alt="Answering questions within a pillar:" />
The summary screen listing tasks to be completed:
<img src="/images/sdlt_summary.png" alt="The summary screen listing tasks to be completed" />
An example task questionnaire with a result:
<img src="/images/sdlt_task_result.png" alt="An example task questionnaire with a result" /></p>]]></content><author><name></name></author><category term="certification" /><category term="accreditation" /><category term="risk" /><category term="security assurance" /><category term="automation" /><category term="work-flow" /><summary type="html"><![CDATA[Reducing noise for security professionals by automating the security assurance life-cycle]]></summary></entry><entry><title type="html">The weirdest compiler bug</title><link href="blog.zaita.com/mingw64/compiler/c++/threading/ieee-754/2021/01/26/The-weirdest-compiler-bug.html" rel="alternate" type="text/html" title="The weirdest compiler bug" /><published>2021-01-26T13:00:00+13:00</published><updated>2021-01-26T13:00:00+13:00</updated><id>blog.zaita.com/mingw64/compiler/c++/threading/ieee-754/2021/01/26/The-weirdest-compiler-bug</id><content type="html" xml:base="blog.zaita.com/mingw64/compiler/c++/threading/ieee-754/2021/01/26/The-weirdest-compiler-bug.html"><![CDATA[<p>There are approximately 7.5x10^18 grains of sand on Earth. This story is about finding changes in an equation that has a difference of approximately 1e-18 out of hundreds of billions of calculations. That is 7 grains of sand that are different to what we expect across the entire planet Earth.</p>

<p>After spending days generating gigabytes of debug logs and GDB breakpoints, I finally discovered a very peculiar bug in the compiler. I thought this would be an interesting story to tell.</p>

<p><strong>Update: Thanks to gus_massa and wiml @ HackerNews for pointing out I had used associative instead of commutative</strong></p>

<h2 id="background">Background</h2>

<p>Back in 2008 I started developing a scientific modelling platform called the <a href="https://niwa.co.nz/fisheries/tools-resources/spatial-population-modelling">Spatial Population Model (SPM)</a>. This software is designed to model or simulate and ocean environments to approximate the health of fish stocks. The output of SPM is used to create scientific reports that are given to Governments for the setting of commercial fishing quota.</p>

<p>Due to the political nature of these reports, reproducibility and integrity of results is crucial. Scientists from around the world will use the software to re-run models across different Operating Systems and compilers to validate results.</p>

<p>Since it was 2008, it was decided that SPM would not be multi-threaded. This is because of: no C++ standard threading, average computer had 2 cores, incompatibility with auto-differentiation libraries)</p>

<p>Fast forward to 2020/21 where many-core systems are commonplace. I had recently acquired for myself an AMD 5950X 16c/32t CPU and was keen to apply it to some modelling work. SPM is still in use as a world leading spatial modelling platform and has received continual updates. I’ve had a long interest in bringing concurrency to SPM to invent new methods of scientific modelling that evolve the underlying mathematics. As a proof of concept, I wanted to start working through threading the internal gradient calculation. Models in SPM are user defined and can be enormous (&gt;100k lines of input text) so we’re unable to analytically determine the gradient function through auto-differentiation. We use an iterative approach tweaking model parameters to calculate the gradient. These tweaks are independent and therefore can be parallelised.</p>

<p>This seemed like a relatively straight forward piece of work. I would need to:</p>
<ol>
  <li>Move all of the classes to be children of a new Model class</li>
  <li>Remove all singletons</li>
  <li>Keep the floating-point operations in the exact same order when calculate on the main thread (IEEE-754)</li>
  <li>Support an arbitrary number of threads</li>
  <li>Produce identical results regardless of the number of threads, Operating System or compiler</li>
</ol>

<h2 id="ieee-754-or-the-floating-point-nightmare">IEEE-754 or the floating-point nightmare</h2>

<p>The development of scientific modelling platforms like SPM requires a significant amount of thought and effort around reproducibility. Given the same input files, any user must be able to re-run your model and get the exact same answer out. This seems incredibly obvious, but it’s not….</p>

<p><a href="https://en.wikipedia.org/wiki/IEEE_754">IEEE-754</a> is the standard for floating-point arithmetic. Floating point math in computers is an approximation. Whenever you see a floating point value it is highly unlikely to be completely accurate. Floating-point arithmetic is commutative, but not associative. So for floating-point numbers,
A + B = B + A always, but
A + (B + C) != (A + B) + C in many cases.
The order in which operations occur within your model will influence the output. While this is inconsequential for small programs or games; this continual adding of errors for scientific models where the number of operations is in the hundreds of billions is consequential.</p>

<p>Every thread we spawn must run the same operations in the exact same order. When the threads give their results back to the main thread, they must do so in a way that ensures that all future operations happen in the exact same order. This is regardless of the number of threads or number of parameters in the model.</p>

<p><em>Side Note: Within scientific models, we use double precision numbers (double) and not single precision (float). Single precision does not have enough precision to handle the number of calculations required. At the end of a model the error added by the approximation of floating-point math is very significant. This limits us to using CPUs over GPUs as the double precision performance of GPUs is not that much better than a modern CPU when you have to factor in the added complexity of writing GPU specific code.</em></p>

<h2 id="the-first-signs-of-trouble">The first signs of trouble</h2>

<p>With my task list ready, I started to work through re-factoring the code. Everything was modified to use a central model class as the parent for the system. This allows me to spawn as many model classes as threads. Everything was compiling and running without crashes. Time to check the output..</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1999.818926297566804 // original score running no threads
1999.8189264475995515 // my new score running 32 threads
</code></pre></div></div>
<p>A slight difference, nothing to be concerned about as I had probably changed the order of execution for some of the equations by threading them. I was testing with a small model that ran in &lt;5 seconds, so working through each of the instantiated classes to check the code won’t take too long. Another day down and nothing obvious was found. Time to run the application through GDB and the <a href="https://en.wikipedia.org/wiki/AddressSanitizer">Sanitizers</a> looking for issues…. nope nothing there either.</p>

<p>A simple model will have recruitment/breeding, ageing and death. I started to reduce and simplify the processes in the model to see if I could identify any key process or parameter. I removed the random number generate and commented out a large amount of complex math…. but still no luck.</p>

<h2 id="down-the-rabbit-hole-of-debug-logging-and-gdb">Down the rabbit hole of debug logging and GDB</h2>

<p>After three days of trying to find the issue, I had added a LARGE amount of debug logging and had resorted to doing step throughs in GDB looking for a point at which I would notice a change in the result. The log files were 20MBs+ and the model would only show issues after a few iterations… why not immediately?</p>

<p>Was I calling a function later in the model that had the issue? Or was the issue starting earlier but at a greater precision that I was printing. I was printing my debug output with a <a href="https://en.cppreference.com/w/cpp/io/manip/setprecision">precision</a> of 15. Time to increase the precision to 20. This is basically the maximum amount of precision you can print from a double with accuracy. I did a few more model runs and saw that the variation in results had moved to much earlier in the model… almost immediately.</p>

<p>The model would load the configuration file, then construct all of the user defined objects in memory. As part of constructing these objects a bunch of calculations would be run to build caches. To save on moving data between threads each thread would repeat the same process. Every new thread would get the configuration file that had been loaded, create all of the objects and run the initial calculations. GDB showed that even these initial calculates were having different results.</p>

<p>My working folder was littered with files named “fuck”, “fuck1” and “fuckN” each with more than 20MBs of debug output for a small model run. Diff was run across files to see where changes were occurring and how small they were… But still no luck.. everything was going wrong almost immediately but I had no idea why.</p>

<h2 id="surely-its-not-a-compiler-bug">Surely it’s not a compiler bug?</h2>

<p>SPM uses the GCC and MinGW64 compilers. This allows us to have near-identical code for Windows and Linux with common makefiles. I have always preferred <a href="https://jmeubank.github.io/tdm-gcc/">TDM-GCC</a> as this has a current release. In this instance, TDM-GCC 9.2.0 from March 2020. Running the sanitizers was done on OpenSuSe Tumbleweed Linux using GCC 10.2.1. These are both very modern versions of the GCC compiler suite. I have never been one to blame tools for a bug in my code.</p>

<p>At this point, I am way down the rabbit hole trying to find the cause of this bug. Some testing had shown me that:</p>
<ul>
  <li>The original binary would produce the same result on every run</li>
  <li>My new binary would produce the same result on every run, but different to the original</li>
  <li>My new binary would produce the same result regardless of the number of threads.. from 1 to 100</li>
</ul>

<p>That last observation made me curious. Why did my new code produce a different result when I ran it with only one thread? What would make it different from the original binary. Having only 1 thread that was executing would eliminate any race conditions.</p>

<p>In the original binary, we do not create any threads. We load the model, build and run it. In the new code, even with one thread we create that thread, load the model, build and run it. What was I doing during the thread creation process that would cause this issue? Time for GBs of log files and GDB.</p>

<p>Stepping through every operation to validate the output lead me into what we call a selectivity. This is a static piece of code that takes an input, calls a standard simple piece of math and returns an output. These few lines of code had returned different results in a thread and not. Time to analyse the following code:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">CLogisticSelectivity</span><span class="o">::</span><span class="n">calculateResult</span><span class="p">(</span><span class="kt">int</span> <span class="n">Age</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">double</span> <span class="n">dRet</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">dTemp</span> <span class="o">=</span> <span class="p">(</span><span class="n">dA50</span><span class="o">-</span><span class="n">Age</span><span class="p">)</span><span class="o">/</span><span class="n">dAto95</span><span class="p">;</span>

    <span class="k">if</span><span class="p">(</span><span class="n">dTemp</span> <span class="o">&gt;</span> <span class="mf">5.0</span><span class="p">)</span>
      <span class="n">dRet</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">dTemp</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mf">5.0</span><span class="p">)</span>
      <span class="n">dRet</span> <span class="o">=</span> <span class="n">dAlpha</span><span class="p">;</span>
    <span class="k">else</span>
      <span class="n">dRet</span>  <span class="o">=</span> <span class="n">dAlpha</span><span class="o">/</span><span class="p">(</span><span class="mf">1.0</span><span class="o">+</span><span class="n">pow</span><span class="p">(</span><span class="mf">19.0</span><span class="p">,</span><span class="n">dTemp</span><span class="p">));</span>

    <span class="k">return</span> <span class="n">dRet</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>If I gave the code Age = 1 then ran it I got the following results:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Local  = 0.0010370292068795884059
Thread = 0.0010370292068795879722
</code></pre></div></div>

<p>What gives? There is nothing in here that should be different in a thread. I am not passing in anything but an int with the value of 1. I edited the code to make dA50 and dAto95 local variables to remove any potential race conditions or thread wonkiness and still had the same error in output. Everything was initialized within the same function and the only external value was an Integer. Weird….</p>

<h2 id="compiler-bug-but-how">Compiler bug? But how…</h2>

<p>Looking at the code, the only things that could create the bug were the operators and pow() call. These are part of the C++ standard offering so it’s highly unlikely that either of these would have an error. What next? Off to <a href="https://godbolt.org/">GodBolt</a> to try some other compilers to see if I get wonky results on them. MSVC++… nope, Clang… nope, GCC-Trunk on Linux… nope. I am only getting this weird behaviour in TDM-GCC. Time to try some other MingW64 compilers. <a href="https://nuwen.net/mingw.html">Nuwen</a>… Yes, <a href="http://mingw-w64.org/doku.php">Mingw64</a>.. yes, TDM-GCC… yes.</p>

<p>Confirmed: It’s a bug in MinGW64.</p>

<p>When I create a new thread and run floating point operations in that thread, I get slightly different answers.</p>

<h2 id="getting-it-fixed-well-soon">Getting it fixed.. well soon…</h2>

<p>Off to SourceForge I went to log a <a href="https://sourceforge.net/p/mingw-w64/bugs/867/">bug</a>. After waiting a month and getting no response I jumped on IRC to ask the same question. Within 24 hours my issue had a comment indicating that it had been <a href="https://sourceforge.net/p/mingw-w64/mingw-w64/ci/295fafcf584ce105426045b03d17aa90d105808d/">fixed</a>. This had not yet picked up by any of the pre-built distributions.</p>

<p>New threads were not calling <a href="https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/fpreset?view=msvc-160">_fpreset()</a> when they were constructed, which “reinitializes the floating-point math package”. This would mean that the default values used within floating point arithmetic would be slightly different when you were inside a thread.</p>

<p>As there have not been any downstream versions of MinGW64 that have this fix, I have had to resort to calling _fpreset() within the threads myself. A dirty but, but effective fix.</p>

<p>All n all. I spent around 5 days chasing this bug through my code. I generated Gigabytes of log files and had to get down to the precision of 7.5 grains of sand on the planet Earth. The compiler missing a key function call turned out to be the cause of the issue. Many times, while trying to find the root cause I found myself questioning my ability to write code, diagnose bugs and remain sane. I’m glad I found an answer and have a way forward.</p>

<p>When the code was tested with an AMD 5950X and 32 threads, solving a model went from 23.5 hours to 90 minutes. This was a substantial improvement and this work alone provides significant new opportunities for iterating through models when developing scientific reports.</p>]]></content><author><name></name></author><category term="mingw64" /><category term="compiler" /><category term="C++" /><category term="threading" /><category term="IEEE-754" /><summary type="html"><![CDATA[When the same code produces different results in a thread...]]></summary></entry></feed>